q()
library(datasets)
data(iris)
?iris
?mean
mean(iris, na.rm = TRUE)
x <- c(0:10, 50)
x
z <- iris
z
subset(z, Species=="virginica", Sepal.Length)
mean(z)
colMeans(iris)
y <- colMeans(iris)
iris
colMeans(z)
z
z <- iris
subset(z, Species=="virginica", Sepal.Length)
z
z
subset(z, Species=="virginica", Sepal.Length)
y <- subset(z, Species=="virginica", Sepal.Length)
y
colMeans(y)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
debug(ls)
## Matrix inversion is usually a costly computation and there may be some benefit to caching the inverse of a matrix rather than computing it repeatedly.
## Here is a pair of functions that cache the inverse of a matrix:
## 1. makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
## 2. cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix function.
##                If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
## This function creates a special "matriz", which is really a list containing a function to
## 1 .set the value of the matrix
## 2. get the value of the matix
## 3. set the value of the inverse matrix
## 4. get the value of the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
setMatrix <- function(pMatrix) {
x <<- pMatrix
inverseMatrix <- NULL
}
getMatrix <- function() {
x
}
setInverseMatrix <- function(pInverseMatrix) {
inverseMatrix <<- pInverseMatrix
}
getInverseMatrix <- function() {
inverseMatrix
}
list(setMatrix=setMatrix, getMatrix=getMatrix, setInverseMatrix=setInverseMatrix, getInverseMatrix=getInverseMatrix)
}
##
## The following function computes the inverse of the special "matrix" created with the cacheMatrix function.
## However, it first checks to see if the inverse matrix has already been calculated (and the matrix has not changed).
## If so, it gets the inverse matrix from the cache and skips the computation.
## Otherwise, it calculates the inverse matrix of the data and sets the value of the inverse matrix in the cache via the setinverse function.
##
cacheSolve <- function(x, ...) {
inverse <- x$getInverseMatrix()
if (!is.null(inverse)) {
message("get inverse matrix from cache data")
return (inverse)
}
matrix <- x$getMatrix()
inverse <- solve(matrix)
x$setInverseMatrix(inverse)
## Return a matrix that is the inverse of 'x'
inverse
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
Q
undebug(ls)
exit
quit
undebug(ls)
## Matrix inversion is usually a costly computation and there may be some benefit to caching the inverse of a matrix rather than computing it repeatedly.
## Here is a pair of functions that cache the inverse of a matrix:
## 1. makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
## 2. cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix function.
##                If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
## This function creates a special "matriz", which is really a list containing a function to
## 1 .set the value of the matrix
## 2. get the value of the matix
## 3. set the value of the inverse matrix
## 4. get the value of the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
setMatrix <- function(pMatrix) {
x <<- pMatrix
inverseMatrix <- NULL
}
getMatrix <- function() {
x
}
setInverseMatrix <- function(pInverseMatrix) {
inverseMatrix <<- pInverseMatrix
}
getInverseMatrix <- function() {
inverseMatrix
}
list(setMatrix=setMatrix, getMatrix=getMatrix, setInverseMatrix=setInverseMatrix, getInverseMatrix=getInverseMatrix)
}
##
## The following function computes the inverse of the special "matrix" created with the cacheMatrix function.
## However, it first checks to see if the inverse matrix has already been calculated (and the matrix has not changed).
## If so, it gets the inverse matrix from the cache and skips the computation.
## Otherwise, it calculates the inverse matrix of the data and sets the value of the inverse matrix in the cache via the setinverse function.
##
cacheSolve <- function(x, ...) {
inverse <- x$getInverseMatrix()
if (!is.null(inverse)) {
message("get inverse matrix from cache data")
return (inverse)
}
matrix <- x$getMatrix()
inverse <- solve(matrix)
x$setInverseMatrix(inverse)
## Return a matrix that is the inverse of 'x'
inverse
}
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
m
m$getMatrix()
cacheSolve(m)
cacheSolve(m)
library(XML)
url<-"http://simple.wikipedia.org/wiki/List_of_countries_by_population_density"
parsed<-htmlParse(url)
DF<-readHTMLTable(parsed)
View(DF[[1]])
library(XML)
url <- "http://simple.wikipedia.org/wiki/List_of_countries_by_population_density"
install.packages("XML")
library(XML)
url <- "http://simple.wikipedia.org/wiki/List_of_countries_by_population_density"
parsed<-htmlParse(url)
DF<-readHTMLTable(parsed)
View(DF[[1]])
parsed <- htmlParse(url)
url <- "http://simple.wikipedia.org/wiki/List_of_countries_by_population_density"
parsed <- htmlParse(url)
DF<-readHTMLTable(parsed)
DF<-readHTMLTable(parsed)
View(DF[[1]])
Records1<-read.csv("C:/Users/isak.rabin/Downloads/2014-08-01.csv.gz")
Records2<-read.csv("C:/Users/isak.rabin/Downloads/2014-08-02.csv.gz")
Records<-rbind(Records1,Records2)
view(Records)
View(Records)
hist(Records)
install.packages("Shiny")
install.packages("shiny")
nrow(Records)
tableByCountry <- table(Records$country)
sort(tableByCountry)
SG <- Records[which(Records$country=="SG"),]
SG <- Records[Records$country %in% "SG",]
dplyr package (refer to Swirl)
barplot(sort(tableByCountry))
which(Records$country=="SG")
Records$countr %in% "SG"
Records$country %in% "SG"
SG <- Records[which(Records$country=="SG")]
SG <- Records[which(Records$country=="SG")]
Table_SGpackages <- table(SG$package)
Table_SGpackages <- table(droplevels(SG$package))
barplot(Table_SGpackages)
barplot(sort(Table_SGpackages), las=2)
barplot(sort(Table_SGpackages),cex.names=0.7,las=2)
shinyapps::setAccountInfo(
name="sgirabin",
token="231C558EAC6B7C3BB3B39EDD9B383396",
secret="<SECRET>")
install.packages('devtools')
install.packages("gridextra")
install.packages(gridextra)
install.packages("gridExtra")
install.packages("pdflatex")
install.packages("pdflatex")
install.packages("TeX")
install.packages("pdf")
View(z)
install.packages("ggthemes")
install.packages("ISLR")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
install.packages("e1071")
cartModel <- train(Class ~ ., data=trainData, method="rpart")
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
install.packages("rattle")
install.packages("rattle")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("randomForest")
install.packages("rpart.plot")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
q()
library(shiny)
library(shiny)
runExample("01_hello")
names(internetmelt) <- c('year','averageInternet', 'countries', 'countriesInternet')
library(reshape2)
#internet data
internet <- read.csv('./data/internet.csv')
internetmelt <- melt(internet, id=c('Year','Average'), measure.vars=c('Singapore','Thailand','Malaysia','Indonesia','Philippines','Vietnam','Myanmar','Cambodia'))
names(internetmelt) <- c('year','averageInternet', 'countries', 'countriesInternet')
#mobile data
mobile <- read.csv('./data/mobile.csv')
mobilemelt <- melt(mobile, id=c('Year','Average'), measure.vars=c('Singapore','Thailand','Malaysia','Indonesia','Philippines','Vietnam','Myanmar','Cambodia'))
names(mobilemelt) <- c('year','averageMobile', 'countries', 'countriesMobile')
# combine all datasets above into single data frame
dataset <- merge(internetmelt, mobilemelt, by=c('year','countries'))
write.csv(file='./data/dataset.csv', x=dataset, row.names=FALSE)
library(reshape2)
internet <- read.csv('./data/internet.csv')
internetmelt <- melt(internet, id=c('Year','Average'), measure.vars=c('Singapore','Thailand','Malaysia','Indonesia','Philippines','Vietnam','Myanmar','Cambodia'))
names(internetmelt) <- c('year','averageInternet', 'countries', 'countriesInternet')
getpwd()
getdir()
qplot("year", "countriesInternet", data=subset(dataset, countries=="Singapore"), color="year",size="countriesInternet")
* Shiny's interactivity allows users to focus on a number of information on particular year & observe trend over time
* Shiny's interactivity allows users to focus on a number of information on particular year & observe trend over time
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
getwd()
setwd("C:/Users/isak.rabin/Documents/Personal/Coursera/develop-data-product/repositories/")
getwd()
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
qplot(dataset$year, dataset$countriesInternet, data=subset(dataset, countries=="Singapore"), color=dataset$year, size=dataset$countriesInternet)
qplot(dataset$year, dataset$countriesInternet, data=dataset, color=dataset$countries, shape=as.factor(year), size=dataset$countriesInternet)
